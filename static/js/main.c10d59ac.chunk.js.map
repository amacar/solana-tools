{"version":3,"sources":["components/VerifyMessage.js","components/SignMessage.js","components/Header.js","App.js","index.js","components/TextField.js","components/SignatureFormat.js"],"names":["VerifyMessage","useState","sigFormat","setSigFormat","message","setMessage","address","setAddress","signature","setSignature","result","messageBytes","Buffer","from","publicKeyBytes","bs58","decode","messages","getMessageBytes","signatureBytes","getSignatureBytes","some","nacl","sign","detached","verify","multiline","label","value","setValue","minRows","onSigFormatChange","e","target","style","textAlign","marginTop","backgroundColor","color","borderRadius","padding","fontWeight","fontSize","replace","JSON","parse","domain","concat","version","messageTypes","messageLength","Uint8Array","Uint16Array","length","buffer","push","map","messageType","marginBottom","width","SignMessage","useWallet","publicKey","signMessage","shownSignature","setShownSignature","error","setError","isSigning","setIsSigning","signMessageHandler","encodedMessage","sigArr","sig","toJSON","data","setShownSig","clearError","format","getSignatureInFormat","open","autoHideDuration","onClose","msg","disabled","variant","onClick","signatureFormat","severity","encode","toString","stringify","display","flexDirection","alignItems","justifyContent","position","Header","SIGN_ROUTE","VERIFY_ROUTE","routeRegex","RegExp","TabPanel","children","index","Box","sx","p","wallets","PhantomWalletAdapter","SolflareWalletAdapter","SolletWalletAdapter","App","isVerify","window","location","href","includes","selectedTab","setSelectedTab","WalletProvider","autoConnect","WalletDialogProvider","Container","maxWidth","borderBottom","borderColor","Tabs","onChange","_","currentUrl","url","history","replaceState","Tab","rootElement","document","getElementById","ReactDOM","render","CustomTextField","props","SignatureFormat","row","control"],"mappings":"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","file":"static/js/main.c10d59ac.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport nacl from \"tweetnacl\";\nimport bs58 from \"bs58\";\nimport { CustomTextField } from \"./TextField\";\nimport { SignatureFormat } from \"./SignatureFormat\";\n\nexport const VerifyMessage = () => {\n  const [sigFormat, setSigFormat] = useState(\"byteArray\");\n  const [message, setMessage] = useState(\"signed message\");\n  const [address, setAddress] = useState(\"N6ywVtXEfm8CsAQasaGAG4aeN7LLNDMtrh88Q1uHscg\");\n  const [signature, setSignature] = useState(\n    \"[23,42,195,185,112,68,99,252,236,27,75,72,221,64,175,196,73,151,46,54,187,214,123,110,51,187,183,179,141,153,17,74,221,101,254,245,175,101,40,80,60,61,54,37,191,134,134,248,40,86,126,215,42,252,200,50,181,28,197,181,63,237,222,13]\"\n  );\n\n  let result = false;\n  try {\n    const messageBytes = Buffer.from(message);\n    const publicKeyBytes = bs58.decode(address);\n    const messages = getMessageBytes(sigFormat, messageBytes);\n    const signatureBytes = getSignatureBytes(sigFormat, signature);\n    result = messages.some((message) => {\n      try {\n        return nacl.sign.detached.verify(message, signatureBytes, publicKeyBytes);\n      } catch {\n        return false;\n      }\n    });\n  } catch {}\n\n  return (\n    <div>\n      <CustomTextField multiline label=\"Message\" value={message} setValue={setMessage} />\n      <CustomTextField label=\"SOL Address\" value={address} setValue={setAddress} />\n      <CustomTextField multiline minRows={4} label=\"Signature\" value={signature} setValue={setSignature} />\n      <SignatureFormat sigFormat={sigFormat} onSigFormatChange={(e) => setSigFormat(e.target.value)} />\n      <div style={{ textAlign: \"center\", marginTop: \"35px\" }}>\n        <span\n          style={{\n            backgroundColor: result ? \"#2e7d32\" : \"#d32f2f\",\n            color: \"white\",\n            borderRadius: \"20px\",\n            padding: \"15px\",\n            fontWeight: \"bold\",\n            fontSize: \"x-large\",\n          }}\n        >\n          Signature is {!result && \"not \"} verified!\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst getSignatureBytes = (sigFormat, signature) => {\n  switch (sigFormat) {\n    case \"base58\":\n      return bs58.decode(signature);\n    case \"base64\":\n      return Buffer.from(signature, sigFormat);\n    case \"hex\":\n      return Buffer.from(signature.replace(\"0x\", \"\"), sigFormat);\n    case \"byteArray\":\n      return Buffer.from(JSON.parse(signature), \"hex\");\n  }\n};\n\nconst getMessageBytes = (sigFormat, message) => {\n  const messageBytes = Buffer.from(message);\n  const messages = [messageBytes];\n\n  if (sigFormat === \"base58\") {\n    const domain = Buffer.concat([Buffer.from([\"0xff\"]), Buffer.from(\"solana offchain\")]);\n    const version = Buffer.from([0]);\n    const messageTypes = [Buffer.from([0]), Buffer.from([1]), Buffer.from([2])];\n    const messageLength = Buffer.from(new Uint8Array(new Uint16Array([messageBytes.length]).buffer));\n    messages.push(\n      ...messageTypes.map((messageType) => Buffer.concat([domain, version, messageType, messageLength, messageBytes]))\n    );\n  }\n\n  return messages;\n};\n","import { useState } from \"react\";\nimport bs58 from \"bs58\";\nimport { Button, Alert, Snackbar } from \"@mui/material\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-material-ui\";\nimport { CustomTextField } from \"./TextField\";\nimport { SignatureFormat } from \"./SignatureFormat\";\n\nconst style = { marginBottom: \"15px\", width: \"100%\" };\n\nexport const SignMessage = () => {\n  const { publicKey, signMessage } = useWallet();\n  const [sigFormat, setSigFormat] = useState(\"byteArray\");\n  const [message, setMessage] = useState(\"signed message\");\n  const [signature, setSignature] = useState(null);\n  const [shownSignature, setShownSignature] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isSigning, setIsSigning] = useState(false);\n\n  const signMessageHandler = async () => {\n    try {\n      const encodedMessage = Buffer.from(message);\n      setIsSigning(true);\n      const sigArr = await signMessage(encodedMessage, \"utf8\");\n      const sig = Buffer.from(sigArr).toJSON().data;\n      setSignature(sig);\n      setShownSig(sigFormat, sig);\n      clearError();\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsSigning(false);\n    }\n  };\n\n  const onSigFormatChange = (e) => {\n    const signatureFormat = e.target.value;\n    setSigFormat(signatureFormat);\n    if (!signature) return;\n    setShownSig(signatureFormat, signature);\n  };\n\n  const setShownSig = (format, sig) => {\n    const signatureBytes = Buffer.from(sig);\n    setShownSignature(getSignatureInFormat(format, signatureBytes));\n  };\n\n  const handleMessageChange = (msg) => {\n    setMessage(msg);\n    setSignature(null);\n    clearError();\n  };\n\n  const clearError = () => setError(\"\");\n\n  return (\n    <div>\n      <Snackbar open={!!error} autoHideDuration={60000} message={error} onClose={clearError} />\n      {!publicKey ? (\n        <div>\n          <WalletMultiButton style={style} />\n          <Alert severity=\"error\">Please connect to the wallet first!</Alert>\n        </div>\n      ) : (\n        <>\n          <CustomTextField multiline label=\"Message\" value={message} setValue={handleMessageChange} />\n          <CustomTextField disabled label=\"SOL Address\" value={publicKey} />\n          <Button\n            style={{ ...style, marginBottom: \"45px\" }}\n            variant=\"contained\"\n            disabled={!message || isSigning}\n            onClick={signMessageHandler}\n          >\n            {isSigning ? \"Confirm Sign Message...\" : \"Sign Message\"}\n          </Button>\n          {signature && (\n            <>\n              <CustomTextField\n                disabled\n                multiline\n                minRows={4}\n                label=\"Signature\"\n                value={shownSignature}\n                setValue={setSignature}\n              />\n              <SignatureFormat sigFormat={sigFormat} onSigFormatChange={onSigFormatChange} />\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nconst getSignatureInFormat = (sigFormat, signature) => {\n  switch (sigFormat) {\n    case \"base58\":\n      return bs58.encode(signature);\n    case \"base64\":\n      return signature.toString(\"base64\");\n    case \"hex\":\n      return `0x${signature.toString(\"hex\")}`;\n    case \"byteArray\":\n      return JSON.stringify(signature.toJSON().data);\n  }\n};\n","const style = {\n  backgroundColor: \"#282c34\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  color: \"white\",\n  position: \"relative\",\n  width: \"100%\",\n  textAlign: \"center\",\n};\n\nexport const Header = () => (\n  <header style={style}>\n    <h1>Solana Sign / Verify Message</h1>\n  </header>\n);\n","import { useState } from \"react\";\nimport { Container, Tabs, Tab, Box } from \"@mui/material\";\nimport { WalletProvider } from \"@solana/wallet-adapter-react\";\nimport { PhantomWalletAdapter, SolflareWalletAdapter, SolletWalletAdapter } from \"@solana/wallet-adapter-wallets\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { Header } from \"./components/Header\";\nimport { VerifyMessage } from \"./components/VerifyMessage\";\nimport { SignMessage } from \"./components/SignMessage\";\n\nconst SIGN_ROUTE = \"/#sign-message\";\nconst VERIFY_ROUTE = \"/#verify-message\";\nconst routeRegex = new RegExp(`(${SIGN_ROUTE}|${VERIFY_ROUTE})`);\n\nconst TabPanel = ({ children, value, index }) => <>{value === index && <Box sx={{ p: 3 }}>{children}</Box>}</>;\n\nconst wallets = [new PhantomWalletAdapter(), new SolflareWalletAdapter(), new SolletWalletAdapter()];\n\nexport const App = () => {\n  const isVerify = window.location.href.includes(VERIFY_ROUTE);\n  const [selectedTab, setSelectedTab] = useState(isVerify ? 1 : 0);\n\n  const handleTabChange = (_, value) => {\n    setSelectedTab(value);\n    const currentUrl = window.location.href.replace(/\\/$/, \"\");\n    const url = `${currentUrl.replace(routeRegex, \"\")}${value ? VERIFY_ROUTE : SIGN_ROUTE}`;\n    window.history.replaceState({}, \"\", url);\n  };\n\n  return (\n    <WalletProvider wallets={wallets} autoConnect>\n      <WalletDialogProvider>\n        <Header />\n        <Container style={{ maxWidth: \"700px\" }}>\n          <Box>\n            <Box sx={{ borderBottom: 1, borderColor: \"divider\", display: \"flex\", justifyContent: \"center\" }}>\n              <Tabs value={selectedTab} onChange={handleTabChange}>\n                <Tab style={{ fontWeight: \"bold\" }} label=\"Sign Message\" />\n                <Tab style={{ fontWeight: \"bold\" }} label=\"Verify Message\" />\n              </Tabs>\n            </Box>\n            <Box>\n              <TabPanel value={selectedTab} index={0}>\n                <SignMessage />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={1}>\n                <VerifyMessage />\n              </TabPanel>\n            </Box>\n          </Box>\n        </Container>\n      </WalletDialogProvider>\n    </WalletProvider>\n  );\n};\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n","import { TextField } from \"@mui/material\";\n\nconst style = { marginBottom: \"15px\", width: \"100%\" };\n\nexport const CustomTextField = ({ label, value, setValue, multiline = false, ...props }) => (\n  <TextField\n    {...props}\n    multiline={multiline}\n    value={value}\n    style={style}\n    label={label}\n    variant=\"outlined\"\n    onChange={(e) => setValue(e.target.value)}\n  />\n);\n","import { FormControl, FormLabel, RadioGroup, Radio, FormControlLabel } from \"@mui/material\";\n\nexport const SignatureFormat = ({ sigFormat, onSigFormatChange }) => (\n  <FormControl>\n    <FormLabel>Signature format</FormLabel>\n    <RadioGroup row value={sigFormat} onChange={onSigFormatChange}>\n      <FormControlLabel value=\"byteArray\" control={<Radio />} label=\"Byte Array\" />\n      <FormControlLabel value=\"hex\" control={<Radio />} label=\"Hex\" />\n      <FormControlLabel value=\"base58\" control={<Radio />} label=\"Base58\" />\n      <FormControlLabel value=\"base64\" control={<Radio />} label=\"Base64\" />\n    </RadioGroup>\n  </FormControl>\n);\n"],"sourceRoot":""}